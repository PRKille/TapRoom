{"version":3,"sources":["Components/Header.js","Components/TapRoom/Keg.js","Components/KegFolder/KegForm.js","Components/TapRoom/TapRoom.js","Components/KegDetails/KegDetails.js","Components/App.js","serviceWorker.js","index.js"],"names":["Header","className","Keg","props","id","name","abv","price","count","inventory","onClick","onBeerPuchase","Fragment","onKegClick","KegForm","onSubmit","formSubmissionHandler","type","placeholder","buttonText","TapRoom","sortList","tapList","sort","a","b","toLowerCase","map","keg","key","brand","onKegSelection","onPintSold","event","preventDefault","onNewKegPurchase","target","value","v4","KegDetails","onKegDeletion","handleBackToTapRoom","onKegEdit","App","currentPage","state","showTapRoom","component","handleKegSelection","handleNewKegPurchase","handlePintPurchase","selectedKeg","handleKegDelete","handleKegEdit","newKeg","otherKegs","filter","setState","updatedTapList","newInventory","updatedKeg","newTapList","concat","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.be8582dc.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../App.css';\r\n\r\nfunction Header() {\r\n  return(\r\n    <div className=\"header\">\r\n      <h1>Welcome to the Epicodus Tap Room!</h1>\r\n      <p>Formerly known as The Rialto</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Keg = (props) => {\r\n\r\n  function hasInventory(count) {\r\n    return count > 10 ? <button className=\"purchaseButton\" onClick={() => props.onBeerPuchase(props.id)}>Purchase</button>\r\n      : count <= 10 && count > 0 ? <React.Fragment><p>Almost Out!</p><button className=\"purchaseButton\" onClick={() => props.onBeerPuchase(props.id)}>Purchase</button></React.Fragment>\r\n      : <p>Sold Out!</p>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"keg\" id={props.id}>\r\n      <h3>{props.name}</h3>\r\n      <h4>ABV: {props.abv} Price/Pint: {props.price}</h4>\r\n      {hasInventory(props.inventory)}\r\n      <button className=\"purchaseButton\" onClick={() => props.onKegClick(props.id)}>Beer Details</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nKeg.propTypes = {\r\n  id: PropTypes.string,\r\n  inventory: PropTypes.number,\r\n  name: PropTypes.string,\r\n  price: PropTypes.string,\r\n  onKegClick: PropTypes.func,\r\n  onBeerPuchase: PropTypes.func\r\n}\r\n\r\nexport default Keg;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './KegForm.css';\r\n\r\nfunction KegForm(props) {\r\n  return (\r\n    <div className=\"formControl\">\r\n      <form className=\"createForm\" onSubmit={props.formSubmissionHandler}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          placeholder=\"Beer Name\" />\r\n        <input\r\n          type=\"text\"\r\n          name=\"brand\"\r\n          placeholder=\"Brewery\" />\r\n        <input\r\n          type=\"text\"\r\n          name=\"price\"\r\n          placeholder=\"Price per Pint\" />\r\n        <input\r\n          type=\"text\"\r\n          name=\"abv\"\r\n          placeholder=\"ABV\" />\r\n        <button type='submit'>{props.buttonText}</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nKegForm.propTypes = {\r\n  formSubmissionHandler: PropTypes.func,\r\n  buttonText: PropTypes.string\r\n}\r\n\r\nexport default KegForm;","import React from 'react';\r\nimport Keg from './Keg';\r\nimport KegForm from '../KegFolder/KegForm'\r\nimport PropTypes from \"prop-types\";\r\nimport './TapRoom.css'\r\nimport '../../App.css'\r\nimport { v4 } from 'uuid';\r\n\r\nfunction TapRoom(props){\r\n\r\n  function handleKegPurchaseSubmit(event) {\r\n    event.preventDefault();\r\n    props.onNewKegPurchase({\r\n      name: event.target.name.value, \r\n      brand: event.target.brand.value, \r\n      price: event.target.price.value, \r\n      abv: event.target.abv.value,\r\n      inventory: 124,\r\n      id: v4()});\r\n  }\r\n\r\n  let sortList = props.tapList.sort((a,b) =>{\r\n    const nameA = a.name.toLowerCase();\r\n    const nameB = b.name.toLowerCase();\r\n    return nameA < nameB ? -1 : 1;\r\n  });\r\n  \r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"kegs\">\r\n        {sortList.map((keg) => (\r\n          <div>\r\n            <hr />\r\n            <Keg\r\n              key={keg.id}\r\n              name={keg.name}\r\n              brand={keg.brand}\r\n              price={keg.price}\r\n              abv={keg.abv}\r\n              inventory={keg.inventory}\r\n              id={keg.id}\r\n              onKegClick={props.onKegSelection}\r\n              onBeerPuchase={props.onPintSold} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <hr />\r\n      <div className=\"form\">\r\n        <h3>Buy a new Keg: </h3>\r\n        <KegForm \r\n        formSubmissionHandler={handleKegPurchaseSubmit}\r\n        buttonText=\"Purchase Keg\" />\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nTapRoom.propTypes = {\r\n  tapList: PropTypes.arrayOf(PropTypes.object),\r\n  onNewKegPurchase: PropTypes.func,\r\n  onKegSelection: PropTypes.func\r\n}\r\n\r\nexport default TapRoom;","import React from 'react';\r\nimport KegForm from '../KegFolder/KegForm'\r\nimport PropTypes from 'prop-types';\r\nimport '../../App.css'\r\n\r\nconst KegDetails = (props) => {\r\n\r\n  function handleKegEditSubmit(event) {\r\n    event.preventDefault();\r\n    props.onKegEdit({\r\n      name: event.target.name.value, \r\n      brand: event.target.brand.value, \r\n      price: event.target.price.value, \r\n      abv: event.target.abv.value,\r\n      inventory: props.keg.inventory,\r\n      id: props.keg.id});\r\n  }\r\n\r\n  return (\r\n    <div className=\"form\">\r\n      <h1>{props.keg.name}</h1>\r\n      <h3>{props.keg.brand}</h3>\r\n      <p>ABV: {props.keg.abv}  Pints Left: {props.keg.inventory}</p>\r\n      <button className=\"detailsButton\" onClick={() => props.onKegDeletion(props.keg.id)}>Delete Keg</button>\r\n      <button className=\"detailsButton\" onClick={props.handleBackToTapRoom}>Back to Tap Room</button>\r\n      <div className=\"form\">\r\n        <KegForm\r\n          formSubmissionHandler={handleKegEditSubmit}\r\n          buttonText=\"Edit this Keg\" />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nKegDetails.propTypes = {\r\n  keg: PropTypes.object,\r\n  handleBackToTapRoom: PropTypes.func,\r\n  onKegDeletion: PropTypes.func,\r\n  onKegEdit: PropTypes.func\r\n}\r\n\r\nexport default KegDetails;","import React from 'react';\nimport '../App.css';\nimport Header from './Header';\nimport TapRoom from './TapRoom/TapRoom';\nimport KegDetails from './KegDetails/KegDetails';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      showTapRoom: true,\n      tapList: [\n        {\n          name: \"Ranier\",\n          brand: \"Ranier\",\n          price: \"$3\",\n          abv: \"4.6%\",\n          inventory: 89,\n          id: 1\n        },\n        {\n          name: \"Old Rasputin Russian Imperial Stout\",\n          brand: \"North Coast Brewing Co\",\n          price: \"$6\",\n          abv: \"9.0%\",\n          inventory: 24,\n          id: 2\n        },\n        {\n          name: \"ESB English Ale\",\n          brand: \"Ferment\",\n          price: \"$6\",\n          abv: \"5.4\",\n          inventory: 12,\n          id: 3\n        }\n      ],\n      selectedKeg: {},\n    }\n  }\n\n  currentPage = () => {\n    if (this.state.showTapRoom) {\n      return {\n        component:<TapRoom\n          tapList={this.state.tapList}\n          onKegSelection={this.handleKegSelection}\n          onNewKegPurchase={this.handleNewKegPurchase}\n          onPintSold={this.handlePintPurchase}\n        />\n      }\n    } else {\n      return{\n        component:<KegDetails\n          keg={this.state.selectedKeg}\n          handleBackToTapRoom={this.handleBackToTapRoom}\n          onKegDeletion={this.handleKegDelete}\n          onKegEdit={this.handleKegEdit} />\n      }\n    }\n  }\n\n  handleKegEdit= (newKeg) => {\n    const otherKegs = this.state.tapList.filter(keg => keg.id !== newKeg.id);\n    this.setState({\n      tapList: [...otherKegs, newKeg],\n      selectedKeg: {},\n      showTapRoom: true\n    });\n  }\n\n  handleKegDelete = (id) => {\n    const updatedTapList = this.state.tapList.filter(keg => keg.id !== id);\n    this.setState({\n      tapList: updatedTapList,\n      selectedKeg: {},\n      showTapRoom: true\n      });\n  }\n\n  handlePintPurchase = (id) => {\n    const selectedKeg = this.state.tapList.filter(keg => keg.id === id)[0];\n    const newInventory = selectedKeg.inventory-1;\n    const updatedKeg = {...selectedKeg, inventory: newInventory};\n    const otherKegs = this.state.tapList.filter(keg => keg.id !== id);\n    this.setState({\n      tapList: [...otherKegs, updatedKeg]\n    });\n  }\n\n  handleNewKegPurchase = (newKeg) => {\n    const newTapList = this.state.tapList.concat(newKeg);\n    this.setState({tapList: newTapList});\n  }\n\n  handleKegSelection = (id) => {\n    const selectedKeg = this.state.tapList.filter(keg => keg.id ===id)[0];\n    this.setState({\n      selectedKeg: selectedKeg,\n      showTapRoom: false\n    });\n  }\n\n  handleBackToTapRoom = () => {\n    this.setState({\n      showTapRoom: true\n    });\n  }\n\n  render() {\n    let currentPage = this.currentPage();\n    return (\n      <React.Fragment>\n        <Header />\n        {currentPage.component}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}